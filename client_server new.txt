#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/wait.h>
#include <string.h>

#define SHM_SIZE 1024

int main() {
    int shmid;
    key_t key;
    char *shmaddr;

    // Generate a unique key
    key = ftok(".", 'S');
    if (key == -1) {
        perror("ftok");
        exit(EXIT_FAILURE);
    }

    // Create a shared memory segment
    shmid = shmget(key, SHM_SIZE, IPC_CREAT | 0666);
    if (shmid == -1) {
        perror("shmget");
        exit(EXIT_FAILURE);
    }

    // Attach the shared memory segment to the process's address space
    shmaddr = shmat(shmid, NULL, 0);
    if (shmaddr == (char *) -1) {
        perror("shmat");
        exit(EXIT_FAILURE);
    }

    pid_t pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { // Child process (Client)
        // Read the message from the shared memory
        printf("Message read from shared memory by client: %s\n", shmaddr);
        // Detach the shared memory segment
        shmdt(shmaddr);
    } else { // Parent process (Server)
        // Write a message to the shared memory
        strcpy(shmaddr, "Hello from the server!");
        printf("Message written to shared memory by server: %s\n", shmaddr);
        // Detach the shared memory segment
        shmdt(shmaddr);
        // Wait for the client process to complete
        wait(NULL);
        // Remove the shared memory segment
        shmctl(shmid, IPC_RMID, NULL);
    }
    return 0;
}
